#+TITLE: MattatoyoMNG DEV TODO
#+AUTHOR: Giulia
* UI
- [ ] hide keyboard when clicking outside an =EditText=
- [X] add detailview for event
- [X] update date/time formatter to use =applicationContext= (in =Utils.kt=)
- [X] swipe to delete
- [X] show user info in drawer (username, profile pic)
- [X] show default image if no profile picture is supplied by user for =User=
- [X] show owner name in =CreateEventActivity=
- [X] back button in =CreateEventActivity=
- [X] date picker in =CreateEventActivity=
- [X] time picker in =CreateEventActivity=
- [X] show default image if no image is supplied for =Event=
- [X] swipe to edit instead of clicking edit icon

* Functionalities
- [ ] add add reminder in event detail
- [ ] add delete dialog
- [ ] add people/shifts to event
- [ ] change password in =ProfileUpdate=
- [ ] forgot password
- [ ] load +images+ *something* with multi-threading (coroutines??!?)
- [ ] paginate query of eventlist?!
- [ ] fix search feature
- [ ] show past events option in settings??
- [X] reminder DOES NOT have to be linked to event!! otherwise everybody will have a reminder!! use a tuple <user, reminder>
- [X] hide past events
- [X] remove unused stuff from =build.grade(:app)=
- [X] add tags in =EventsFragment= card item
- [X] can't delete tags in detail view
- [X] add =profileUpdateFail()= method to handle errors (like =eventUploadFail()=)
- [X] add reminder feature
- [X] add tags in create/edit event
- [X] delete event activity
- [X] edit event activity
- [X] move Firebase logic to Firebase module for events loading in =EventsFragment=
- [X] split save event from load
- [X] move Firebase logic to Firebase module for Login and Register
- [X] add Activity to update user info
- [X] show date time properly in event card
- [X] show events chronologically
- [X] move Firebase logic to Firebase module for =CreateEventActivity=
- [X] load event image programmatically in event card
- [X] fix ERROR when saving event without image
- [X] make Event model =Parcelable= instead of =Serializable=


* Co-routines in Kotlin
For getting events...
#+begin_src kotlin
  GlobalScope.launch(Dispatchers.IO){
      val eventList = storageRef.get().await().toObjects(Event::class.java)
      withContext(Dispatchers.Main){
	  fragment.setupEventsRecyclerView(eventList)
      }
  }
#+end_src
For loading image to storage...
#+begin_src kotlin
  GlobalScope.launch(Dispatchers.IO) {
      delay(3000L)
      eventImageUrl = sRef.putFile(eventImageUri!!).await()
	  .metadata!!.reference!!.downloadUrl.result.toString()
      Log.d(TAG, "event image URL = $eventImageUrl")
      withContext(Dispatchers.Main){
	  // hide progress bar
	  binding.createEventPB.visibility = View.INVISIBLE
	  // save event
	  saveEvent()
      }
  }

#+end_src
